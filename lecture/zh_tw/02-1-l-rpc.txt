6.824 2018 Lecture 2: Infrastructure: RPC and threads

常問問題: 為何使用 Go 語言
  6.824 使用 C++ 很多年
    C++ 效果不錯
    但學生花很多時間追蹤 pointer 與記憶體分配/釋放的 bug
    目前沒有滿意的 C++ RPC 程式庫
  Go 比 C++ 好一些
    良好的 concurrency 支持(goroutines, channels, 等等)
    支持 RPC
    自動 Garbage-Collected
    型別安全
    執行緒 + GC 很有吸引力!
  我們喜歡寫 Go
    相對簡單又傳統
  介紹完後請去看看 https://golang.org/doc/effective_go.html
  Russ Cox 在 3/8 會來客座教授一堂

執行緒
  執行緒是有用的結構工具
  Go 稱為 goroutines，其他人都叫執行緒
  執行緒可能會蠻棘手的

為何使用執行緒
  表現 concurrency，而這正是分散式系統的自然表現
  I/O concurrency
    等待 server 回應的同時，處理下個 request
  多核心:
    執行緒平行的跑在多個核心上

執行緒 = "執行緒的執行"
  執行緒讓一個程式可以(邏輯上地)同時執行很多事情
  執行緒們分享記憶體
  每個執行緒包含一些執行緒的各自狀態:
    program counter, registers, stack

一個程式中有多少執行緒?
  有時受架構決定
    e.g. 每個 client 一個執行緒, 每個背景工作一個執行緒
  有時受多核平行處理的需求決定
    每個核心一個執行緒
    Go runtime 自動排程 goroutines 到有空的核心上
  有時受 I/O 併發需求決定
    數值受延遲與容量決定
    持續增加，直到吞吐量停止成長
  Go 執行緒相當便宜
    100s or 1000s 都行，但也許不要百萬級
    創造執行緒，比調用 method 貴

多執行緒的挑戰:
  資料分享
    一個執行緒讀資料，同時另一個執行緒正在寫入
    e.g. 兩個執行緒執行 count = count + 1
    這是 "race" -- 往往是一個 bug
    -> 使用 Mutexes (或其他同步化(synchronization))
    -> 或是避免分享資料
  協調兩個執行緒
    (MapReduce 中)如何等所有 Map 執行緒結束
    -> 使用 Go channels 或是 WaitGroup
  併發的精細度(granularity of concurrency)
    粗糙的併發 -> 簡單，但只能達到一點點併發與平行化
    精細的併發 -> 更多的併發，也帶來更多的 races 與 deadlocks

何為爬蟲(crawler)
  目標是取得所有網頁資料，e.g. 輸入變成索引
  網頁形成Graph
  每頁還有多個連結
  Graph 會形成迴圈

爬蟲的挑戰:
  為了 I/O 的併發
    同時取得複數的 URLs
    來增加每秒能處理的 URLs 數量
    因為(在這情境中)網路的延遲的限制，遠大於網路容量的限制
  每個 URL 只取得 *一次*
    避免浪費網路帶寬
    請善待遠端的伺服器們
    => 需要記下造訪過的 URLs
  知道是否完成

爬蟲解決方案 [課程網頁上有crawler.go 連結]    

序列化爬蟲(serial crawler):
  下載過的圖(fetched map)避免重複，打斷 Graph 的迴圈
  簡單的 map，使用 reference 呼叫多次遞迴
  but: 同時只能處理一頁

併發 Mutex 爬蟲:
  每頁產生一個執行緒
    很多併發下載，更高的下載速度
  執行緒共用一份 fetched map
  為何使用 Mutex (== 鎻)
    不使用鎻:
      兩個網頁如果有連結，連到同一個 URL
      兩個執行緒同時處理這些網頁
      T1 檢查 fetched[url] T2 檢查 fetched[url]
      兩邊看到，都是還沒處理過
      兩個就會都去處理，這是錯的
    同時讀跟寫(或又讀又寫) 是一個 race
      通常表示這邊有 bug
      bug 可能只會在比較衰的執行緒中斷(thread interleavings)顯現
    如果我把 Lock()/Unlock() 註解掉呢?
      go run crwaler.go
      go run -race crawler.go
    lock 使得檢查與更新有原子性(atomic)
  程式如何知道它做完了?
    sync.WaitGroup
    明確地等待所有子執行緒完成遞迴

併發 channel 爬蟲
  Go channel:
    channel 是一個物件; 可以有很多個
      ch := make(chan int)
    channel 讓執行緒傳送物件到另一個執行緒
    ch <- x
      server 等到 goroutine 收到東西
    y := <- ch
      for y := range ch
      一個接收器，等其他 goroutine 送東西過來
    可以使用 channel 來溝通與同步化
    多個執行緒可以從單一 channel 傳送跟接收
    記得: 接收方接收前，發送端會 block
      傳送東西時，鎖住可能很危險...
  併發 channel master()
    master() 產生 worker goroutine 來處理每一頁
    worker() 將 URLs 送進 channel
      多個 worker 送進一個 channel
    master() 從 channel 中將 URL 一個個讀出來
    [流程圖: master, channel, workers]
  不需要去鎖住 fechted map，這個 map 不再分享共用
  有任何共享的資料嗎?
    channel
    送進 channel 的 slices 與 strings
    master() 傳送給 worker() 的參數

何時使用共享資料與 lock，何時使用 channel
  大部分問題，兩者都可解決
  更重要的是程序員怎麼考慮
    狀態 -- 共享與鎻
    溝通 -- channels
    等待事件(event) -- channels
  使用 Go 的 race 探測工具:
    https://golang.org/doc/articles/race_detector.html
    go test -race 

遠端程序調用(Remote Procedure Call (RPC))
  一個分散式系統的重要元件; 本課所有 lab 都使用 RPC
  目標: 一個容易編寫的 client/server 溝通

RPC 訊息流程圖:
  Client             Server
    request--->
       <---response

RPC 試圖模擬本地 fn 調用:
  Client:
    z = fn(x, y)
  Server:
    fn(x, y) {
      compute
      return z
    }
  實務上不會這麼簡單...

軟體架構
  client app         handlers
    stubs           dispatcher
   RPC lib           RPC lib
     net  ------------ net

Go 範例: kv.go 課程網頁上有連結
  一個 key/value 儲存 server -- Put(key,value), Get(key)->value
  使用 Go 的 RPC 程序庫
  Common:
    需要宣告 Args 與 Reply 的 struct，每一個 RPC type 都需要宣告
  Client:
    connnect()'s Dial() 產生 TCP connection 到 server
    Call() 詢問 RPC library 如何執行 call
      指定 server function 名稱，參數，放置 reply 的地方
      RPC library marshall 參數，發送 request，等待，unmarshally reply
      透過 Call() 的回傳值，來判斷是否已經收到回覆
      通常也會收到 reply.Err 顯示服務層的錯誤
  Server:
    Go 需要你宣告 object 以及 methods 來作為 RPC handler
    然後你透過 RPC library 註冊(register) 物件
    你接受 TCP connection, 提供給 RPC library
    The RPC library
      讀取每個 request
      每個 request 產生一個 goroutine
      unmarshall request
      調用指定名稱的方法(dispatch)
      marshall reply
      把reply寫入，透過 TCP connection
    Server 的 Get() 與 Put() handlers
      需要 lock; 因為 RPC library 每個 request 產生 goroutine
      讀取 args; 更改 reply

一些細節:
  Binding: client 如何知道要對誰溝通
    對 Go's RPC, server 名稱與 port 為 Dial 的參數 
    大型的系統 server 會有類似名稱的設定
  Marshlling: 將資料格式化成封包(format data into packets)
    Go's RPC library 可以傳送 strings, arrays, objects, maps, 等等
    Go 傳送 pointer 時，是直接複製(server 不能讀取 client 的 pointer)
    不能傳送 channel 或是 functions

RPC 問題: 如何處理錯誤?
  e.g. 遺失封包, 網路錯誤，伺服器很慢，伺服器死了

Client RPC library 看到的錯誤是什麼樣子?
  client 無法看到 server 的 respose
  client *不*知道 server 是否已經看到 request 了
    也許 server 從沒收到 request
    也許 server 執行完，但是 reply 前死了
    也許 server 執行完，但是 reply 前網路死了
  [流程圖 lost reply]

最簡錯誤處理藍圖: "best effort" 最大努力
  Call() 會等待 response 一段時間
  如果沒收到，在重送一次 request
  重試幾次
  然後才放棄，回傳 error

問題: "best effort" 對應用來說好應付嗎?

一個特別糟糕的情境:
  client 執行
    Put("k", 10);
    Put("k", 20);
  都成功
  Get("k") 會拿到什麼?
  [流程圖: timeout, re-send, 先出發的較晚抵達]

問題: best effort 真的適用嗎?
  唯讀的操作
  重複多次不影響的操作
    e.g. DB 檢查一個紀錄是否已經 insert

更好的 RPC 行為: "at most once" 至多一次
  想法: server RPC 程式碼檢查重複的 request
    回傳上次的 reply，而非重新執行 handler
  問題: 如何檢查 request 是否重複?
    使用相同的 XID 來重送
  server:
    if seen[xid]:
      r = old[xid]
    else
      r = handler()
      old[xid] = r
      seen[xid] = true

有些 at-most-once 的複雜性
  會出現在 lab 3
  如何確保 XID 是 unique
    大的亂數數值?
    加上獨特 client ID(ip address?) 與去序列號(sequence #)?
  server 總會需要拋棄舊有 RPC 的紀錄
    拋棄這些紀錄安全嗎?
    想法:
      每個 client 有 unique ID(也許是大亂數數值)
      每個 client RPC 有序列號
      client includes "seen all replies <= X" with every RPC
      更像是 TCP 序列號與 acks
    or only allow client one outstanding RPC at a time
      抵達 seq+1 後，允許 server 拋棄所有 <= seq 資料
    如何處理重複 request，當原始的 RPC 仍在執行中?
      server 不知道是否已經 reply 了
      idea: "pending" flag 來標示每個執行中的 RPC; 等待或忽略

如果 at-most-once server 壞了，然後重啟?
  如果 at-most-once 寫入重複的資訊到記憶體中，server 會忘記有這件事
    然後重啟後，直接傳送重複的 request
  也許應該把避免重複的訊息寫進硬碟
  也許應該副本 server，來複製保留避免重複的訊息

Go RPC 是簡單形式的 at-most-once
  開啟 TCP connection
  寫 request 到 TCP connection 中
  Go RPC server 重送 request
    server 不會看到重複的 requests
  Go RPC 程式碼回覆錯誤，如果沒有收到 reply
    也許是 tcp timeout
    也許 server 沒看到 request
    也許 server 處理完 request，但 server/網路，在 reply 回來前壞了

想想 "exactly once" 恰好一次
  無限重試，加上重複檢測，加上容錯服務
  Lab 3
